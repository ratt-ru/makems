# Include useful macros
include(LofarMacros)

# First check to see whether we need to update our CMakeLists.txt files.

# Generate version program source file
execute_process(COMMAND ${CMAKE_MODULE_PATH}/makeversion
  WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
  RESULT_VARIABLE result)
if(result)
  message(SEND_ERROR "makeversion failed!")
endif(result)

# Create/update FillPackage__VersionInc.h. Avoid unnecessary recompilations:
# first create a temporary file; only copy it if files are different.
set(_file "${CMAKE_CURRENT_BINARY_DIR}/FillPackage__VersionInc.h")
file(WRITE "${_file}.tmp"
  "/* Generated by CMake for project ${PROJECT_NAME} */\n\n")
foreach(dep ${${PROJECT_NAME}_DEPENDENCIES})
  # This hack is for MAC packages, which follow different naming conventions.
  if(DEFINED ${dep}_INCLUDE_PATH_SUFFIX)
    set(include_path ${${dep}_INCLUDE_PATH_SUFFIX})
  else()
    set(include_path ${dep})
  endif(DEFINED ${dep}_INCLUDE_PATH_SUFFIX)
  file(APPEND "${_file}.tmp"
    "#include <${include_path}/Package__Version.h>\n")
endforeach(dep ${${PROJECT_NAME}_DEPENDENCIES})
execute_process(COMMAND ${CMAKE_COMMAND} -E 
  copy_if_different "${_file}.tmp" "${_file}")

# Create/update FillPackage__VersionFunc.h. Avoid unnecessary recompilations:
# first create a temporary file; only copy it if files are different.
lofar_get_hostname(hostname)
set(_file "${CMAKE_CURRENT_BINARY_DIR}/FillPackage__VersionFunc.h")
file(WRITE "${_file}.tmp"
  "/* Generated by CMake for project ${PROJECT_NAME} */\n\n"
  "namespace LOFAR {\n"
  "  std::string ${PROJECT_NAME}Version::getBuildTime()\n"
  "  { return std::string(__DATE__) + \" \" + std::string(__TIME__); }\n"
  "  std::string ${PROJECT_NAME}Version::getBuildUser()\n"
  "  { return \"$ENV{USER}\"; }\n"
  "  std::string ${PROJECT_NAME}Version::getBuildMachine()\n"
  "  { return \"${hostname}\"; }\n"
  "  void ${PROJECT_NAME}Version::fillInfo\n"
  "    (int level, std::vector<Version::PkgInfo>& vec)\n"
  "  {\n"
  "    // Add info of this package if needed.\n"
  "    vec.push_back (Version::PkgInfo(level, &getInfo));\n"
  "    // Add info of packages being used.\n")
foreach(dep ${${PROJECT_NAME}_DEPENDENCIES})
  file(APPEND "${_file}.tmp"
    "    ${dep}Version::fillInfo (level+1, vec);\n")
endforeach(dep ${${PROJECT_NAME}_DEPENDENCIES})
file(APPEND "${_file}.tmp"
  "  }\n"
  "}\n")
execute_process(COMMAND ${CMAKE_COMMAND} -E 
  copy_if_different "${_file}.tmp" "${_file}")

# Add current binary directory to compiler's include path, so that the
# generated header files can be found during compilation.
include_directories(${CMAKE_CURRENT_BINARY_DIR})
