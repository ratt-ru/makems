#! /usr/bin/env python
#
# Script to read all the logfiles from a given LOFAR system build
#
# Usage:
#        ./scanBuildLog -d [lofarBasDir] -f [base logname]
# Args:
#       base logname:  The base name for the logfiles.
#
#       for now we assume that builds are being logged in different files
#       per Variant. The week/year number would be the basename.
#       so a build would produce lognames like:
#                                               week441-dbg.log
#                                               week441-opt.log
#                                               week441-mpich.log
#                                               week441-iccdbg.log
#                                               week441-docxxx.log
#
#      and the command to produce the html pages would be:
#      ./scanBuildLog -d LOFAR -f week441
#
# The resulting html pages will be copied to the lofar apache server so
# they can be accessed by others.
#
# 8-10-2004   Arthur Coolen
#

#
# Import all packages we need
#
import sys
import os
import fnmatch
import re
import getopt
from datetime import date

def remoteFileMove(lofarServer,serverDir):
  # move the html Files that reside in the "thisWeek" directory
  # on the server and have to do with this machines build to the
  # "lastWeek" directory
  cmd="mv "+serverDir+"/BuildResults/thisWeek/*" + machineName() + \
       "* "+serverDir+"/BuildResults/lastWeek/"
  return os.system("ssh -1 "+lofarServer+"  " + cmd)

def copyServerSideScript(lofarServer,serverDir,lofarDir):
  #
  # copy the Serverside script (createNewIndex) to the lofar server
  # in the BuildResults directory.
  return os.system("scp -oProtocol=1 "+lofarDir+"/autoconf_share/createNewIndex "+lofarServer+":"+serverDir+"/BuildResults")

def runServerSideScript(lofarServer,serverDir,server):
  #
  # run the serverSideScript to generate the new index files
  #
  print 'ssh -1 '+lofarServer+' "cd '+serverDir+'/BuildResults;./createNewIndex -d '+serverDir+' -s '+server+'"'
  return os.system('ssh -1 '+lofarServer+' "cd '+serverDir+'/BuildResults;./createNewIndex -d '+serverDir+' -s '+server+'"')

def copyFiles2Server(copyDir,lofarServer):
  #
  # function to copy the generated html pages to the server
  # The Protocol=1 flag will be passed to ssh on lofar0 to
  # enable Protocol 1 authorisation. This is needed at the moment
  # because lofar0 is still an older machine that has no ssh2 installed
  #
  return os.system("scp -oProtocol=1 *.html "+lofarServer+":"+copyDir)
  
def find(pattern, startdir=os.curdir):
  #
  #Function to walk directory structures and find pattern matches.
  #
  # args:
  #   - pattern           filepattern to look for
  #   - startdir          directory to start search from
  #
  matches=[]
  os.path.walk(startdir, findvisitor, (matches, pattern))
  matches.sort()
  return matches

def findvisitor((matches, pattern), thisdir, nameshere):
  #
  #Function called by find to search for patterns in directories
  #
  # args:
  #   - matches           array containing found matches
  #   - pattern           pattern to search for
  #   - thisdir           present directory
  #   - nameshere         all files in this directory
  #
  for name in nameshere:
    if fnmatch.fnmatch(name, pattern):
      fullpath = os.path.join(thisdir, name)
      matches.append(fullpath)


def machineName():
  #
  # Return the name from the machine we are running on.
  #
  return os.uname()[1]

def openHTMLPage(file,title,withHeader):
  #
  #Function to make the uniform pageheader voor CM.
  #
  # args:
  #   - file              file to print to
  #   - title             title for the page
  #   - withHeader        Will the header be printed on top of the page
  #
  file.write('<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">\n')
  file.write("<html>\n")
  file.write("<head>\n")
  file.write("<title>"+title+"</title>\n")
  # css stuff
  file.write('      <style type="text/css">\n')
  file.write("      td {\n")
  file.write("              text-align:center;\n")
  file.write("      } \n")
  file.write("      th, td {\n")
  file.write("              vertical-align:baseline;\n")
  file.write("              white-space:nowrap;\n")
  file.write("              padding:2px\n")
  file.write("      }\n")
  file.write("      table {\n")
  file.write("              margin:0em;\n")
  file.write("      }\n")
  file.write("      .tableBoxOuter {\n")
  file.write("              width:100%;\n")
  file.write("              height:29em;\n")
  file.write("       }\n")
  file.write("       </style>\n")
  # javascript to generate headers
  file.write('<script type="text/javascript">\n')
  file.write("/* Copyright Richard Cornford 2004 */\n")
  file.write("\n")
  file.write("var finalizeMe = (function(){\n")
  file.write("        var global = this,base,safe = false,svType = (global.addEventListener && 2)||(global.attachEvent && 3)|| 0;\n")
  file.write("        function addFnc(next, f){function t(ev){if(next)next(ev);f(ev);};t.addItem = function(d){if(f != d.getFunc()){if(next){next.addItem(d);}else{next = d;}}return this;};t.remove = function(d){if(f == d){f = null;return next;}else if(next){next = next.remove(d);}return this;};t.getFunc = function(){return f;};t.finalize = function(){if(next)next = next.finalize();return (f = null);};return t;};\n")
  file.write("        function addFunction(f){if(base){base = base.addItem(addFnc(null, f));}else{base = addFnc(null, f);}};\n")
  file.write("        function ulQue(f){addFunction(f);if(!safe){switch(svType){case 2:global.addEventListener(\"unload\", base, false);safe = true;break;case 3:global.attachEvent(\"onunload\", base);safe = true;break;default:if(global.onunload != base){if(global.onunload)addFunction(global.onunload);global.onunload = base;}break;}}};\n")
  file.write("        ulQue.remove = function(f){if(base)base.remove(f);};\n")
  file.write("        function finalize(){if(base){base.finalize();switch(svType){case 3:global.detachEvent(\"onunload\", base);break;case 2:global.removeEventListener(\"unload\", base, false);break;default:global.onunload = null;break;}base = null;}safe = false;};\n")
  file.write("        ulQue(finalize);return ulQue;\n")
  file.write("})();\n")
  file.write("\n")
  file.write("\n")
  file.write("var InitializeMe = (function(){\n")
  file.write("        var global = this,base = null,safe = false;\n")
  file.write("        var listenerType = (global.addEventListener && 2)||(global.attachEvent && 3)|| 0;\n")
  file.write("        function getStackFunc(next, funcRef, arg1,arg2,arg3,arg4){function l(ev){funcRef((ev?ev:global.event), arg1,arg2,arg3,arg4);if(next)next = next(ev);return (funcRef = null);};l.addItem = function(d){if(next){next.addItem(d);}else{next = d;}};return l;};\n")
  file.write("        return (function(funcRef, arg1,arg2,arg3,arg4){if(base){base.addItem(getStackFunc(null, funcRef, arg1,arg2,arg3,arg4));}else{base = getStackFunc(null, funcRef, arg1,arg2,arg3,arg4);}if(!safe){switch(listenerType){case 2:global.addEventListener(\"load\", base, false);safe = true;break;case 3:global.attachEvent(\"onload\", base);safe = true;break;default:if(global.onload != base){if(global.onload){base.addItem(getStackFunc(null, global.onload));}global.onload = base;}break;}}});\n")
  file.write("})();\n")
  file.write("\n")
  file.write("var queryStrings = (function(out){\n")
  file.write("    if(typeof location != 'undefined'){\n")
  file.write("        var temp = location.search||location.href||'';\n")
  file.write("        var nvp, ofSet;\n")
  file.write("        if((ofSet = temp.indexOf('?')) > -1){\n")
  file.write("            temp = temp.split(\"#\")[0];\n")
  file.write("            temp = temp.substring((ofSet+1), temp.length);\n")
  file.write("            var workAr = temp.split('&');\n")
  file.write("            for(var c = workAr.length;c--;){\n")
  file.write("                nvp = workAr[c].split('=');\n")
  file.write("                if(nvp.length > 1){out[nvp[0]] = nvp[1];}\n")
  file.write("            }\n")
  file.write("        }\n")
  file.write("   }\n")
  file.write("   return out;\n")
  file.write("})({});\n")
  file.write("\n")
  file.write("var TimedQue = (function(){\n")
  file.write("        var base, timer;\n")
  file.write("        var interval = 60;\n")
  file.write("        var newFncs = null;\n")
  file.write("        function addFnc(next, f){function t(){next = next&&next();if(f()){return t;}else{f = null;return next;}}t.addItem = function(d){if(next){next.addItem(d);}else{next = d;}return this;};t.finalize = function(){return ((next)&&(next = next.finalize())||(f = null));};return t;}\n")
  file.write("        function tmQue(fc){if(newFncs){newFncs = newFncs.addItem(addFnc(null, fc));}else{newFncs = addFnc(null, fc);}if(!timer){timer = setTimeout(tmQue.act, interval);}}\n")
  file.write("  tmQue.act = function(){var fn = newFncs, strt = new Date().getTime();if(fn){newFncs = null;if(base){base.addItem(fn);}else{base = fn;}}base = base&&base();if(base||newFncs){var t = interval - (new Date().getTime() - strt);timer = setTimeout(tmQue.act, ((t > 0)?t:1));}else{timer = null;}};\n")
  file.write("        tmQue.act.toString = function(){return 'TimedQue.act()';};\n")
  file.write("        tmQue.finalize = function(){timer = timer&&clearTimeout(timer);base = base&&base.finalize();newFncs = null;};\n")
  file.write("        return tmQue;\n")
  file.write("})();\n")
  file.write("\n")
  file.write("var getElementWithId = (function(){if(document.getElementById){return (function(id){return document.getElementById(id);});}else if(document.all){return (function(id){return document.all[id];});}return (function(id){return null;});})();\n")
  file.write("\n")
  file.write("function getSimpleExtPxIn(el){\n")
  file.write("        var temp, temp2, tick = 0, getBorders = retFalse, doCompStyle = retFalse,defaultView,objList = [];\n")
  file.write("        function retFalse(){return false;}\n")
  file.write("        retFalse.elTest = retFalse;\n")
  file.write("        retFalse.iY = retFalse.iX = retFalse.y = retFalse.x = retFalse.w = retFalse.h = retFalse.bb = retFalse.bt = retFalse.bl = retFalse.br = 0;\n")
  file.write("        function retThis(){return retThis;}\n")
  file.write("        function gCompStyleBorders(p, el){doCompStyle(p, defaultView.getComputedStyle(el, '' ));}\n")
  file.write("        function doComputedStyleFloat(p, cs){p.bt = (cs.getPropertyCSSValue('border-top-width').getFloatValue(5));p.bl = (cs.getPropertyCSSValue('border-left-width').getFloatValue(5));p.br = (cs.getPropertyCSSValue('border-right-width').getFloatValue(5));p.bb = (cs.getPropertyCSSValue('border-bottom-width').getFloatValue(5));}\n")
  file.write("        function doComputedStyleValue(p, cs){p.bt = Math.ceil(parseFloat(s.getPropertyValue('border-top-width')))|0;p.bl = Math.ceil(parseFloat(s.getPropertyValue('border-left-width')))|0;p.br = Math.ceil(parseFloat(s.getPropertyValue('border-right-width')))|0;p.bb = Math.ceil(parseFloat(s.getPropertyValue('border-bottom-width')))|0;}\n")
  file.write("        function gClientBorders(p, el){if(el.clientWidth||el.clientHeight){p.bb = (el.offsetHeight - (el.clientHeight + (p.bt = el.clientTop|0)))|0;p.br = (el.offsetWidth - (el.clientWidth + (p.bl = el.clientLeft|0)))|0;}}\n")
  file.write("        function getInterfaceObj(el){var lastTick = NaN;var offsetParent = getSimpleExtPxInFn(el.offsetParent)||retFalse;function p(doTick){if(doTick){tick = (1+tick)%0xEFFFFFFF;}if(tick != lastTick){lastTick = tick;offsetParent();getBorders(p, el);p.iY = (p.y = (offsetParent.iY + (el.offsetTop|0))) + p.bt;p.iX = (p.x = (offsetParent.iX + (el.offsetLeft|0))) + p.bl;p.w = el.offsetWidth|0;p.h = el.offsetHeight|0;}return p;}p.elTest = function(elmnt){return (elmnt == el);};p.iY = p.iX = p.w = p.h = p.y = p.x = p.bb = p.bt = p.bl = p.br = 0;return (objList[objList.length] = p);}\n")
  file.write("        function getSimpleExtPxInFn(el){if((!el)||(el == document)){return retFalse;}for(var c = objList.length;c--;){if(objList[c].elTest(el)){return objList[c];}}return getInterfaceObj(el);}\n")
  file.write("        function setSpecialObj(el){var lastTick = NaN;function p(doTick){if(doTick){tick = (1+tick)%0xEFFFFFFF;}return p;}p.elTest = function(elmnt){return (elmnt == el);};p.iY = p.iX = p.w = p.h = p.y = p.x = p.bb = p.bt = p.bl = p.br = 0;objList[objList.length] = p;}\n")
  file.write("        if((typeof el.offsetParent != 'undefined')&&(typeof el.offsetTop == 'number')&&(typeof el.offsetWidth == 'number')){if((typeof el.clientTop == 'number')&&(typeof el.clientWidth == 'number')){getBorders = gClientBorders;}else if((defaultView = document.defaultView)&&defaultView.getComputedStyle &&(temp = defaultView.getComputedStyle(el, '' ))&&(((temp.getPropertyCSSValue)&&(temp2 = temp.getPropertyCSSValue('border-top-width'))&&(temp2.getFloatValue)&&(doCompStyle = doComputedStyleFloat))||((temp.getPropertyValue)&&(doCompStyle = doComputedStyleValue)))){getBorders = gCompStyleBorders;temp2 = temp = null;}if(document.documentElement){setSpecialObj(document.documentElement);}if(document.body){setSpecialObj(document.body);}return (getSimpleExtPxIn = getSimpleExtPxInFn)(el);}else{retThis.elTest = retFalse;retThis.iY = retThis.iX = retThis.y = retThis.x = retThis.w = retThis.h = retThis.bb = retThis.bt = retThis.bl = retThis.br = NaN;return (getSimpleExtPxIn = retThis);}\n")
  file.write("}\n")
  file.write("\n")
  file.write("function getNewFILCFncStac(fnc){function getNewFnc(f){var next = null;function t(a){next = next&&next(a);return (f(a))?t:next;}t.finalize = function(){next = next&&next.finalize();return (f = null);};t.addItem = function(d){if(f != d){if(next){next.addItem(d);}else{next = getNewFnc(d);}}return this;};return t;}var base = getNewFnc(fnc);fnc = function(a){base = base&&base(a);};fnc.addItem = function(d){if(base){base.addItem(d)}else{base = getNewFnc(d);}};fnc.finalize = function(){return (base = base&&base.finalize());};return fnc;}\n")
  file.write("\n")
  file.write("function GlobalEventMonitor(eventName, functinRef){\n")
  file.write("        var finalize, global = this;\n")
  file.write("        var monitors = {};\n")
  file.write("        var onName = ['on',''];\n")
  file.write("        function mainMonitor(eventName, functinRef){\n")
  file.write("                var monitor = monitors[eventName];\n")
  file.write("                if(monitor){\n")
  file.write("                        monitor(functinRef);\n")
  file.write("                }else{\n")
  file.write("                        setEventMonitor(eventName, functinRef);\n")
  file.write("                }\n")
  file.write("        }\n")
  file.write("        function setListener(eventName, longName, fncStack){\n")
  file.write("                global.addEventListener(eventName, fncStack, false);\n")
  file.write("                return true;\n")
  file.write("        }\n")
  file.write("        function setListener_aE(eventName, longName, fncStack){\n")
  file.write("                global.attachEvent(longName, fncStack);\n")
  file.write("                return true;\n")
  file.write("        }\n")
  file.write("        function oldHandler(f){return (function(e){f(e);return true;});}\n")
  file.write("        function retFalse(){return false;}\n")
  file.write("        function setEventMonitor(eventName, functinRef){\n")
  file.write("                var fncStack, longName;\n")
  file.write("                onName[1] = eventName;\n")
  file.write("                longName = onName.join('');\n")
  file.write("                function main(funcRef){\n")
  file.write("                        if(funcRef){\n")
  file.write("                                fncStack.addItem(funcRef);\n")
  file.write("                                globalCheck();\n")
  file.write("                        }\n")
  file.write("                }\n")
  file.write("                function globalCheck(){\n")
  file.write("                        if(global[longName] != fncStack){\n")
  file.write("                                if(global[longName]){\n")
  file.write("                                        fncStack.addItem(oldHandler(global[longName]));\n")
  file.write("                                }\n")
  file.write("                                global[longName] = fncStack;\n")
  file.write("                        }\n")
  file.write("                } \n")
  file.write("                fncStack = getNewFILCFncStac(functinRef);\n")
  file.write("                if(setListener(eventName, longName, fncStack)){\n")
  file.write("                        globalCheck = retFalse;\n")
  file.write("                }else{\n")
  file.write("                        globalCheck();\n")
  file.write("                }\n")
  file.write("                finalize.addItem(fncStack.finalize);\n")
  file.write("                monitors[eventName] = main;\n")
  file.write("                functinRef = null;\n")
  file.write("        }\n")
  file.write("        if(!global.addEventListener){\n")
  file.write("                if(global.attachEvent){\n")
  file.write("                        setListener = setListener_aE;\n")
  file.write("                }else{\n")
  file.write("                        setListener = retFalse;\n")
  file.write("                }\n")
  file.write("        }\n")
  file.write("        finalizeMe((finalize = getNewFILCFncStac(\n")
  file.write("                function(){\n")
  file.write("                        finalize = monitors = null;\n")
  file.write("                })\n")
  file.write("        ));\n")
  file.write("        (GlobalEventMonitor = mainMonitor)(eventName, functinRef);\n")
  file.write("        functinRef = null;\n")
  file.write("}\n")
  file.write("\n")
  file.write("var tableScroll = (function(){\n")
  file.write("        var global = this, finalise, tableList = {};\n")
  file.write("        var notOnScroll = true, notAbort = true;\n")
  file.write("        var overrideStyles = {\n")
  file.write("                margin:[{keys:['margin','marginBottom','marginLeft','marginRight','marginTop'],value:'0px'}],\n")
  file.write("                padding:[{keys:['padding','paddingBottom','paddingLeft','paddingRight','paddingTop'],value:'0px'}],\n")
  file.write("                border:[\n")
  file.write("                        {keys:['border','borderBottom','borderLeft','borderRight','borderTop'],value:'0px none #FFFFFF'},\n")
  file.write("                        {keys:['borderWidth','borderLeftWidth','borderRightWidth','borderBottomWidth','borderTopWidth'],value:'0px'},\n")
  file.write("                        {keys:['borderStyle','borderRightStyle','borderLeftStyle','borderBottomStyle','borderTopStyle'],value:'none'}\n")
  file.write("                ],\n")
  file.write("                overflow:[{keys:['overflow'],value:'hidden'}],\n")
  file.write("                positionRel:[{keys:['position'],value:'relative'}],\n")
  file.write("                positionAbs:[{keys:['position'],value:'absolute'}],\n")
  file.write("                top:[{keys:['top'],value:'0px'}],\n")
  file.write("                left:[{keys:['left'],value:'0px'}],\n")
  file.write("                zIndex:[{keys:['zIndex'],value:2}]\n")
  file.write("        };\n")
  file.write("        function setStyleProps(styleObj){\n")
  file.write("                var data, dArray;\n")
  file.write("                for(var c = 1;c < arguments.length;c++){\n")
  file.write("                        if((data = overrideStyles[arguments[c]])){\n")
  file.write("                                for(var d = data.length;d--;){\n")
  file.write("                                        dArray = data[d].keys;\n")
  file.write("                                        for(var e = dArray.length;e--;){\n")
  file.write("                                                styleObj[dArray[e]] = data[d].value;\n")
  file.write("                                        }\n")
  file.write("                                }\n")
  file.write("                        }\n")
  file.write("                }\n")
  file.write("                return true;\n")
  file.write("        }\n")
  file.write("        function setClass(el,val){\n")
  file.write("                if(el.setAttribute){el.setAttribute('class',val);}\n")
  file.write("                return (el.className = val);\n")
  file.write("        }\n")
  file.write("        function retFalse(){return false;}\n")
  file.write("        function TableScroll(id){\n")
  file.write("                var midAbsDiv, parent, vHeaderAbsStyle, vHeaderRelStyle, hHeaderAbsStyle, hHeaderRelStyle;\n")
  file.write("                var midAbsDivStyle, midAbsinerDivStyle, inRelDivStyle, outRelDivDim;\n")
  file.write("                var lastScrollTop = NaN, lastScrollLeft = NaN, lastWidth = NaN, lastHeight = NaN, tableDim, table = getElementWithId(id);\n")
  file.write("                var midRelinerDivStyle, midRelinerDiv, testCellDim;\n")
  file.write("                function position(){\n")
  file.write("                        var nh,nw,size,th,tw,cellWidth,celHeight,st = midAbsDiv.scrollTop, sl = midAbsDiv.scrollLeft, h = outRelDivDim(true).h, w = outRelDivDim.w;\n")
  file.write("                        if((size = ((w != lastWidth)||(h != lastHeight)))||(st != lastScrollTop)||(sl != lastScrollLeft)){\n")
  file.write("                                hHeaderRelStyle.left = (((cellWidth = (testCellDim().x - tableDim().iX)) + (lastScrollLeft = sl)) * -1)+'px';//position\n")
  file.write("                                vHeaderRelStyle.top = (((celHeight = (testCellDim.y - tableDim.iY)) + (lastScrollTop = st)) * -1)+'px';\n")
  file.write("                                if(size){\n")
  file.write("                                        vHeaderRelStyle.width = vHeaderAbsStyle.width = midAbsDivStyle.left = hHeaderAbsStyle.left = (cellWidth+'px');\n")
  file.write("                                        hHeaderRelStyle.height = hHeaderAbsStyle.height = midAbsDivStyle.top = vHeaderAbsStyle.top = (celHeight+'px');\n")
  file.write("                                        inRelDivStyle.left = (cellWidth * -1)+'px';\n")
  file.write("                                        inRelDivStyle.top = (celHeight * -1)+'px';\n")
  file.write("                                        midRelinerDivStyle.width = midAbsinerDivStyle.width = ((tw = tableDim.w) - cellWidth)+'px';\n")
  file.write("                                        midRelinerDivStyle.height = midAbsinerDivStyle.height = ((th = tableDim.h) - celHeight)+'px';\n")
  file.write("                                        midAbsDivStyle.height = vHeaderAbsStyle.height = (((nh = ((lastHeight = h) - celHeight)) > celHeight)?nh:celHeight)+'px';\n")
  file.write("                                        midAbsDivStyle.width = hHeaderAbsStyle.width = (((nw = ((lastWidth = w) - cellWidth)) > cellWidth)?nw:cellWidth)+'px';\n")
  file.write("                                        hHeaderRelStyle.width = inRelDivStyle.width = tw + 'px';\n")
  file.write("                                        vHeaderRelStyle.height = inRelDivStyle.height = th + 'px';\n")
  file.write("                                }\n")
  file.write("                        }\n")
  file.write("                        return notOnScroll;\n")
  file.write("                }\n")
  file.write("                function onScroll(){\n")
  file.write("                        notOnScroll = false;\n")
  file.write("                        position();\n")
  file.write("                }\n")
  file.write("                function onSize(){\n")
  file.write("                        position();\n")
  file.write("                        return true;\n")
  file.write("                }\n")
  file.write("                finalise.addItem(function(){\n")
  file.write("                        testCellDim = midRelinerDivStyle = midRelinerDiv =\n")
  file.write("                        midAbsinerDivStyle =  tableDim = vHeaderAbsStyle = vHeaderRelStyle = hHeaderAbsStyle = hHeaderRelStyle = inRelDivStyle = outRelDivDim = midAbsDiv = parent = table = null;\n")
  file.write("                })\n")
  file.write("                if(\n")
  file.write("                        table&&\n")
  file.write("                        (typeof table.scrollTop == 'number')&&\n")
  file.write("                        (typeof table.offsetHeight == 'number')&&\n")
  file.write("                        table.tagName&&\n")
  file.write("                        table.appendChild&&\n")
  file.write("                        table.cloneNode&&\n")
  file.write("                        table.getAttribute&&\n")
  file.write("                        table.getElementsByTagName&&\n")
  file.write("                        (parent = table.parentNode)&&\n")
  file.write("                        parent.insertBefore\n")
  file.write("                  ){\n")
  file.write("                        InitializeMe(function(){\n")
  file.write("                                var newTable, testCell;\n")
  file.write("                                var vHeaderAbs, vHeaderRel, hHeaderAbs, hHeaderRel,outRelDiv, midAbsinerDiv, inRelDiv;\n")
  file.write("                                if(\n")
  file.write("                                        (notAbort)&&\n")
  file.write("                                        (testCell = table.getElementsByTagName('td')[0])&&\n")
  file.write("                                        (newTable = table.cloneNode(true))&&\n")
  file.write("                                        (outRelDiv = document.createElement('DIV'))&&\n")
  file.write("                                        (setClass(outRelDiv, 'tableBoxOuter'))&&\n")
  file.write("                                        (midAbsDiv = document.createElement('DIV'))&&\n")
  file.write("                                        (midRelinerDiv = document.createElement('DIV'))&&\n")
  file.write("                                        (midAbsinerDiv = document.createElement('DIV'))&&\n")
  file.write("                                        (inRelDiv = document.createElement('DIV'))&&\n")
  file.write("                                        (vHeaderAbs = document.createElement('DIV'))&&\n")
  file.write("                                        (vHeaderRel = document.createElement('DIV'))&&\n")
  file.write("                                        (hHeaderAbs = document.createElement('DIV'))&&\n")
  file.write("                                        (hHeaderRel = document.createElement('DIV'))&&\n")
  file.write("                                        (setStyleProps(outRelDiv.style, 'positionRel', 'padding'))&&\n")
  file.write("                                        (midAbsDivStyle = midAbsDiv.style)&&\n")
  file.write("                                        (setStyleProps(midAbsDivStyle, 'positionAbs', 'padding', 'margin', 'border', 'zIndex'))&&\n")
  file.write("                                        (midRelinerDivStyle = midRelinerDiv.style)&&\n")
  file.write("                                        (setStyleProps(midRelinerDivStyle, 'positionRel', 'padding', 'margin', 'border', 'top', 'left'))&&\n")
  file.write("                                        (midAbsinerDivStyle = midAbsinerDiv.style)&&\n")
  file.write("                                        (setStyleProps(midAbsinerDivStyle, 'positionAbs', 'overflow', 'padding', 'margin', 'border', 'top', 'left'))&&\n")
  file.write("                                        (inRelDivStyle = inRelDiv.style)&&\n")
  file.write("                                        (setStyleProps(inRelDivStyle, 'positionRel', 'padding', 'margin', 'border', 'top', 'left'))&&\n")
  file.write("                                        (vHeaderAbsStyle = vHeaderAbs.style)&&\n")
  file.write("                                        (setStyleProps(vHeaderAbsStyle, 'positionAbs', 'overflow', 'padding', 'margin', 'border', 'top', 'left', 'zIndex'))&&\n")
  file.write("                                        (vHeaderRelStyle = vHeaderRel.style)&&\n")
  file.write("                                        (setStyleProps(vHeaderRelStyle, 'positionRel', 'padding', 'margin', 'border', 'top', 'left'))&&\n")
  file.write("                                        (hHeaderAbsStyle = hHeaderAbs.style)&&\n")
  file.write("                                        (setStyleProps(hHeaderAbsStyle, 'positionAbs', 'overflow', 'padding', 'margin', 'border', 'top', 'left', 'zIndex'))&&\n")
  file.write("                                        (hHeaderRelStyle = hHeaderRel.style)&&\n")
  file.write("                                        (setStyleProps(hHeaderRelStyle, 'positionRel', 'padding', 'margin', 'border', 'top', 'left'))&&\n")
  file.write("                                        (setStyleProps(table.style, 'margin'))&&\n")
  file.write("                                        (midAbsDiv.appendChild(midRelinerDiv))&&\n")
  file.write("                                        (midRelinerDiv.appendChild(midAbsinerDiv))&&\n")
  file.write("                                        (midAbsinerDiv.appendChild(inRelDiv))&&\n")
  file.write("                                        (outRelDiv.appendChild(midAbsDiv))&&\n")
  file.write("                                        (vHeaderAbs.appendChild(vHeaderRel))&&\n")
  file.write("                                        (hHeaderAbs.appendChild(hHeaderRel))&&\n")
  file.write("                                        (outRelDiv.appendChild(vHeaderAbs))&&\n")
  file.write("                                        (outRelDiv.appendChild(hHeaderAbs))&&\n")
  file.write("                                        (parent.insertBefore(outRelDiv, table))&&\n")
  file.write("                                        (!isNaN((outRelDivDim = getSimpleExtPxIn(outRelDiv)).w))&&\n")
  file.write("                                        (inRelDiv.appendChild(table))&&\n")
  file.write("                                        (!isNaN((testCellDim = getSimpleExtPxIn(testCell)).w))&&\n")
  file.write("                                        (!isNaN((tableDim = getSimpleExtPxIn(table)).w))&&\n")
  file.write("                                        (hHeaderRel.appendChild(newTable))&&\n")
  file.write("                                        (newTable = table.cloneNode(true))&&\n")
  file.write("                                        (vHeaderRel.appendChild(newTable))\n")
  file.write("                                  ){\n")
  file.write("                                        midAbsDivStyle.overflow = 'scroll';\n")
  file.write("                                        if(midAbsDiv.addEventListener){\n")
  file.write("                                                midAbsDiv.addEventListener('scroll', onScroll, false);\n")
  file.write("                                        }else if(midAbsDiv.attachEvent){\n")
  file.write("                                                midAbsDiv.attachEvent('onscroll', onScroll);\n")
  file.write("                                        }else{\n")
  file.write("                                                midAbsDiv.onscroll = onScroll;\n")
  file.write("                                        }\n")
  file.write("                                        GlobalEventMonitor('resize', onSize);\n")
  file.write("                                        position();\n")
  file.write("                                        TimedQue(position);\n")
  file.write("                                }else{\n")
  file.write("                                        notAbort = false;\n")
  file.write("                                }\n")
  file.write("                        });\n" )
  file.write("                }else{\n")
  file.write("                        notAbort = false;\n")
  file.write("                }\n")
  file.write("                return true;\n")
  file.write("        }\n")
  file.write("        function main(){\n")
  file.write("                var id;\n")
  file.write("                for(var c = 0;c < arguments.length;c++){\n")
  file.write("                        id = arguments[c];\n")
  file.write("                        if(notAbort&&!tableList[id]){\n")
  file.write("                                tableList[id] = TableScroll(id);\n")
  file.write("                        }\n")
  file.write("                }\n")
  file.write("        }\n")
  file.write("        if(\n")
  file.write("                (!global.queryStrings||!queryStrings['noTableScroll'])&&\n")
  file.write("                global.setTimeout&&\n")
  file.write("                global.document&&\n")
  file.write("                document.createElement\n")
  file.write("          ){\n")
  file.write("                finalizeMe((finalise = getNewFILCFncStac(function(){\n")
  file.write("                        finalise = tableList = null;\n")
  file.write("                })));\n")
  file.write("                return main;\n")
  file.write("        }else{\n")
  file.write("                return retFalse;\n")
  file.write("        }\n")
  file.write("})();\n")
  file.write("</script>\n")
  # rest of start make up
  file.write("</head>\n")
  file.write("<body>\n")
  #file.write("<body onload=\"makeScrollableTable('tabela',true,'auto'); \">\n")
  if withHeader:
    file.write("<center>\n")
    file.write("<h1>"+title+"</h1>\n")
    file.write("</center>\n")
    

def closeHTMLPage(file):
  #
  # Closes the html page
  #
  # args:
  #  - file               file to write the html stuff to

  file.write('<script type="text/javascript">\n')
  file.write("  if(typeof tableScroll == 'function'){tableScroll('mainTable');}\n")
  file.write("</script>\n")
  file.write("</body>\n")
  file.write("</html>\n")
  file.close()

def findFailedTests(variant,package,testResultsArray):
  #
  # find if in a given PACKAGE and a given VARIANT testprograms
  # failed.
  #
  # args:
  # - variant            VARIANT looked for
  # - package            PACKAGE looked for
  # - testResultsArray   array that contains progname,variant,package pairs
  #
 
  for row in testResultsArray:
    if (variant == row[1]) & (package == row[2]):
      return 1
  return 0

def findFailedBuilds(variant,package,buildResultsArray):
  #
  # find if in a given PACKAGE and a given VARIANT compiling and
  # / or linking failed.
  #
  # args:
  # - variant            VARIANT looked for
  # - package            PACKAGE looked for
  # - buildResultsArray  array that contains progname,variant,package pairs
  #
 
  for row in buildResultsArray:
    if (variant == row[1]) & (package == row[2]):
      return 1
  return 0

def extendPackageArray(packageArray,allBuildablePackages):
  #
  # Find if a PACKAGE has more Packages under him that can be build also
  # if so, extend the packageArray with those packages
  #
  newPackageArray=[]
  for pck in packageArray:
    if pck != "":
      for line in allBuildablePackages:
        if line.find(pck) > -1 and line != "":
          newPackageArray.append(line)
  return newPackageArray

def usage():
  print "usage: "+sys.argv[0]+" [-h] [-n] [-b] [-d arg] [-f arg] [-s arg] [-t arg]"
  print "args:  -h,--help       - print usage"
  print "       -l,--local      - local processing; do not copy files to server"
  print "       -n,--nocopy     - Do not copy thisWeek to lastWeek"
  print "       -b,--debug      - additional debug output"
  print "       -d,--directory  - LOFAR base directory"
  print "       -f,--filebase   - basename from logfiles. E.g. week441"
  print "       -t,--testserver - give an alternative testserver(usr@www.server.nl)"
  print "       -s,--serverdir  - give an alternative serverdirectory"
  sys.exit(2)


def main(argv):
  lofarDir = "None"
  fileBase = "None"
  lofarServer ="lofar@lofar0.nfra.nl"
  serverDir = "/usr/local/httpd/htdocs"
  noCopy = 0
  debug = 0
  local = 0
  try:
    opts, args = getopt.getopt(argv, "d:f:hlnbs:t:",
                               ["directory=","filebase=","help","local",
                                "nocopy","debug","serverdir=","testdir="])
  except getopt.GetoptError:
    usage()
  for opt, arg in opts:
    if opt in ("-h", "--help"):
      usage()
    elif opt in ("-b", "--debug"):
      debug = 1
    elif opt in ("-l", "--local"):
      local = 1
    elif opt in ("-n", "--nocopy"):
      noCopy = 1
    elif opt in ("-f", "--filebase"):
      fileBase = arg
    elif opt in ("-d", "--directory"):
      lofarDir = arg
    elif opt in ("-s", "--serverdir"):
      serverDir = arg
    elif opt in ("-t", "--testserver"):
      lofarServer = arg

  if lofarServer.find('@') < 0:
    print "Error in serverstring: "+ lofarServer
    usage()
    
  server=str.split(lofarServer,'@')[1]
  if fileBase=="None":
    print "No filebase specified"
    usage()
  if lofarDir=="None":
    print "No LOFAR basedir specified"
    usage()
  if len(sys.argv) < 3:
    usage()
  if os.path.isdir(lofarDir) < 1:
    print lofarDir+" Not found, or not a directory"
    usage()


  #
  # print machine
  #
  print "This build took place on: " + machineName() + "\n\n"
  if local == 0:
    print "Using : " + serverDir + " on "+lofarServer+"\n\n"


  #
  # make an array that contains the VARIANTS PACKAGES
  # for each log file looked for.
  #
  variantPackageArray=[]
  testResultsArray=[]
  buildResultsArray=[]
  allBuildablePackages=[]

  #
  # Patterns to look for in the logfile
  #
  # findthe PACKAGE(S) line to get all Packages being build
  #
  packagePattern = re.compile('(PACKAGES *= *.*$)',re.IGNORECASE)
  #
  # find the VARIANT(S) line to get the Variant being build
  #
  variantPattern = re.compile('(VARIANTS *= *.*$)',re.IGNORECASE)
  #
  # find the Compiletool line for compiling
  #
  compilePattern = re.compile('^.*compiletool .*mode=compile.*$')
  #
  # find the Compiletool line for linking
  #
  linkPattern = re.compile('^.*compiletool .*mode=link.*$')
  #
  # find the Compiletool line for install
  #
  installPattern = re.compile('^.*compiletool .*mode=install.*$')
  #
  # find the target  file within a compile (link)line
  #
  linkTargetPattern=re.compile('^.*mode=link.* -o ([^ ]+).*$')
  #
  # find the sourcefile in a source= line
  #
  sourcePattern=re.compile("^.*source='(.*/)?(.*.cc).*object='(.*)'.*$")


  #
  # find configure.in in Lofar tree
  # each directory that contains it can be build in the LOFAR builds
  # So could potentially be in the PACKAGES line used for the build
  #
  pattern='configure.in'

  for name in find(pattern, lofarDir):
    #
    # first drop the filename
    #
    head, tail = os.path.split(name)
    package=str.replace(head,lofarDir+'/','')
    allBuildablePackages.append(package)

  if debug==1:
    print "All Packages: "
    for line in allBuildablePackages:
      print line
  
  files=find(fileBase+'*.log',os.curdir)
  if len(files)<1:
    print "Sorry, can't find any files starting with "+fileBase
    usage()
    
  for file in files:


    #
    # keep last found build start
    #
    keepLastFoundBuildArray=[]

    try:
      readLogFile=open(file, 'r')
      sfile=file.split(fileBase)
      nfile=machineName()+sfile[1]+".html"
      writeLogFile=open(nfile, 'w')
    except IOError, message:
      sys.exit( "Error opening file: %s" % message )


    openHTMLPage(writeLogFile,"Tagged "+file+" on "+machineName(),"yes")
    writeLogFile.write('<pre>\n')

    aLine=readLogFile.readline()
    print "File: "+file


    while aLine != "":
      #
      # search for PACKAGES keyword
      #
      if str.find(aLine,"PACKAGES")>-1:
        #
        # If PACKAGES found then lift out the different PACKAGES
        #
        matchPackage = packagePattern.search(aLine)
        if matchPackage:
          start,end=matchPackage.span()
          pckArray = re.split(' *',re.sub('(PACKAGES *= *)|(packages *= *)'
                                          ,'',re.sub('"','',aLine[start:end],2)))
        if debug==1:
          print "packages found in Packages array: "
          for line in pckArray:
            print line
        #
        # because a PACKAGE in the PACKAGES line can also say that
        # ALL the Subdirectories UNDER this PACKAGE can be build we must
        # extend this array with those packages before we can continue
        #
        pckArray=extendPackageArray(pckArray,allBuildablePackages)
        if debug==1:
          print "packages after extend: "
          for line in pckArray:
            print line

        #
        # search for VARIANTS keyword in the same line (Old Makefile way)
        #
        matchVariant = variantPattern.search(aLine)
        if matchVariant:
          start,end=matchVariant.span()
          for variant in re.split(' *',re.sub('(VARIANTS *= *)|(variants *= *)',
                                              '',re.sub('"','',aLine[start:end],2))):
            variantPackageArray.append([variant,pckArray])

        if debug==1:
           print "variants found in Variantsline : "
           for line in variantPackageArray:
             print line

      #
      # search for Variants keyword in other lines (rub way of building)
      #
      if str.find(aLine,"VARIANTS")>-1:
        #
        # If VARIANTS found then lift out the different VARIANTS
        #
        matchVariant = variantPattern.search(aLine)
        if matchVariant:
          start,end=matchVariant.span()
          for variant in re.split(' *',re.sub('(VARIANTS *= *)|(variants *= *)',
                                              '',re.sub('"','',aLine[start:end],2))):
            variantPackageArray.append([variant,pckArray])

        if debug==1:
          print "variants found in Variantsline : "
          for line in variantPackageArray:
            print line

      #
      # Find CONFIGURING start
      #
      
      if str.find(aLine,":::::: CONFIGURING VARIANT")>-1:
        keepLastFoundBuildArray=re.split(' *',re.sub('\n','',aLine))
      
      #
      #  Find BUILDING start
      #
      if str.find(aLine,":::::: BUILDING VARIANT")>-1:
        keepLastFoundBuildArray=re.split(' *',re.sub('\n','',aLine))
      
      #
      # Find Failed test
      #
      if str.find(aLine[0:5],'FAIL:')>-1:
        failedProg=re.sub('FAIL:','',re.sub('\n','',aLine))
        testResultsArray.append([failedProg,keepLastFoundBuildArray[3],
                                 keepLastFoundBuildArray[6],nfile])
        #
        # Write target in log file to be able to find the error later
        #
        writeLogFile.write('</pre>\n')
        writeLogFile.write('<a name="'+keepLastFoundBuildArray[6]+
                           '/'+failedProg+'">\n')
        writeLogFile.write('<pre>\n')


      #
      # Find Configure errors
      #
      if str.find(aLine,'configure: error: ') > -1:
        aFile=str.split(aLine,' ')
        if aFile[4] == "find":
          aPack=aFile[5]+" not configured"
        else:
          aPack=aFile[4]+" not configured"
        buildResultsArray.append([aPack,keepLastFoundBuildArray[3],
                                  keepLastFoundBuildArray[6],nfile])
        #
        # Write target in log file to be able to find the error later
        #
        writeLogFile.write('</pre>\n')
        writeLogFile.write('<a name="'+keepLastFoundBuildArray[6]+
                           '/'+aPack+'">\n')

        writeLogFile.write('<pre>\n')

      #
      # Find needed file not found error 
      #
      if str.find(aLine,' *** No rule to make target') > -1:
        aNewLine=str.split(aLine,'`')
        aFile=str.split(aNewLine[1],'\'')
        buildResultsArray.append([aFile[0],keepLastFoundBuildArray[3],
                                  keepLastFoundBuildArray[6],nfile])
        #
        # Write target in log file to be able to find the error later
        #
        writeLogFile.write('</pre>\n')
        writeLogFile.write('<a name="'+keepLastFoundBuildArray[6]+
                           '/'+aFile[0]+'">\n')
        writeLogFile.write('<pre>\n')

      #
      # Find Compile && Link errors
      # Search for strings like:
      #      make[5]: *** [PO_DH_PL.lo] Error 1
      #
      if str.find(aLine,' *** ') > -1:
        if str.find(aLine,' Error ') > -1:
          aFile=str.split(str.replace(str.replace(aLine[str.find(aLine,'make'):],'[',''),']',''))[2]
          aFile=re.sub('check-TESTS','',
                       re.sub('check-am','',
                              re.sub('check-recursive','',
                                     re.sub('all','',
                                            re.sub('all-recursive','',aFile)))))
          if aFile:
            buildResultsArray.append([aFile,keepLastFoundBuildArray[3],
                                      keepLastFoundBuildArray[6],nfile])

            #
            # Write target in log file to be able to find the error later
            #
            writeLogFile.write('</pre>\n')
            writeLogFile.write('<a name="'+keepLastFoundBuildArray[6]+
                               '/'+aFile+'">\n')
            writeLogFile.write('<pre>\n')
      #
      # Find Source line and filter out the src that is been compiled here
      #
      match=sourcePattern.search(aLine)
      if match:
        writeLogFile.write('</pre>\n')
        writeLogFile.write('<a name="'+keepLastFoundBuildArray[6]+
                           '/'+match.group(2)+'">\n')
        writeLogFile.write('<a name="'+keepLastFoundBuildArray[6]+
                           '/'+match.group(3)+'">\n')
        writeLogFile.write('<pre>\n')

      #
      # Find compiletool with mode=link
      if linkPattern.search(aLine):
        match=linkTargetPattern.search(aLine)
        if match:
          writeLogFile.write('</pre>\n')
          writeLogFile.write('<a name="'+keepLastFoundBuildArray[6]+
                           '/'+match.group(1)+'">\n')
          writeLogFile.write('<pre>\n')


        
      #        elif installPattern.search(aLine):
      #          print "found install line"

      writeLogFile.write(aLine)
      aLine=readLogFile.readline()
    readLogFile.close()
    writeLogFile.write('</pre>\n')
    closeHTMLPage(writeLogFile)
    writeLogFile.close()


  #
  # delete 'old' html files
  #
  for fileName in find('*_Failed_'+machineName()+'.html'):
    os.remove(fileName)

  #
  # Open html pages for all packages/Variants that have
  # failed something during the build
  #
  usedFiles=[]
  first=1
  for row in testResultsArray:
    rawName=row[1]+'_'+row[2]+'_Failed_'+machineName()+'.html'
    fileName=str.replace(rawName,'/','_')
    if os.path.isfile(fileName):
      try:
        file=open(fileName,'a')
      except IOError, message:
        sys.exit( "Error opening file: %s" % message )

    else:
      try:
        file=open(fileName,'w')
      except IOError, message:
        sys.exit( "Error opening file: %s" % message )

      openHTMLPage(file,"Failed builds on "+machineName(),"yes")
      file.write("<center><h3>Package: "+row[2]+
                 '&nbsp &nbsp &nbsp &nbsp &nbsp '+
                 "Variant: "+row[1]+"</h3></center>\n")
      file.write('<ul>\n')
      usedFiles.append(fileName)
    if first == 1:
      first=0
      file.write('</ul>\n')
      file.write("<b>during make test:</b>\n")
      file.write('<ul>\n')

    file.write('<li><A href="'+row[3]+'#'+row[2]+'/'+row[0]+'">'+row[0]+'</A></li>\n')
    file.close()

  first=1;
  for row in buildResultsArray:
    rawName=row[1]+'_'+row[2]+'_Failed_'+machineName()+'.html'
    fileName=str.replace(rawName,'/','_')
    if os.path.isfile(fileName):
      try:
        file=open(fileName,'a')
      except IOError, message:
        sys.exit( "Error opening file: %s" % message )
    else:
      try:
        file=open(fileName,'w')
      except IOError, message:
        sys.exit( "Error opening file: %s" % message )
      openHTMLPage(file,"Failed builds on "+machineName(),"yes")
      file.write("<center><h3>Package: "+row[2]+
                 '&nbsp &nbsp &nbsp &nbsp &nbsp '+
                 "Variant: "+row[1]+"</h3></center>\n")
      file.write('<ul>\n')
      usedFiles.append(fileName)
    if first == 1:
      first=0
      file.write('</ul>\n')
      file.write("<b>during make:</b>\n")
      file.write('<ul>\n')

    file.write('<li><A href="'+row[3]+'#'+row[2]+'/'+row[0]+'">'+row[0]+'</A></li>\n')
    file.close()

  #
  # loop over all opened files and close everythingLOFAR -f lofar17-week5
  #
  for fileName in usedFiles:
  
    try:
      file=open(fileName,'a')
    except IOError, message:
      sys.exit( "Error opening file: %s" % message )

    file.write('</ul>\n')
    closeHTMLPage(file)
    file.close()


  #
  # open main HTML file for writing
  #
  htmlFile=open("BuildPage_"+machineName()+".html",'w')

  #
  # Open html page
  #
  dateString = date.today().isoformat()
  openHTMLPage(htmlFile,"BuildReport on "+machineName()+" "+dateString,"yes")

  #
  # Legenda
  #
  htmlFile.write('<center>\n')
  htmlFile.write('<h3>Legend</h3>\n')
  htmlFile.write('<table border cellspacing=2 cellpadding=5>\n')
  htmlFile.write('<tr>\n')
  htmlFile.write('<td bgcolor="GRAY"><font color="GRAY">xxxxxxxx</font></td>\n')
  htmlFile.write('<td>Not Build</td>')
  htmlFile.write('</tr>\n')
  htmlFile.write('<tr>\n')
  htmlFile.write('<td bgcolor="GREEN"><font color="GREEN">xxxxxxxx</font></td>\n')
  htmlFile.write('<td>Build, no errors</td>')
  htmlFile.write('</tr>\n')
  htmlFile.write('<tr>\n')
  htmlFile.write('<td bgcolor="RED"><font color="RED">xxxxxxxx</font></td>\n')
  htmlFile.write('<td>Build, compile or Link error(s)</td>')
  htmlFile.write('</tr>\n')
  htmlFile.write('<tr>\n')
  htmlFile.write('<td bgcolor="YELLOW"><font color="YELLOW">xxxxxxxx</font></td>\n')
  htmlFile.write('<td>Build, Test program(s) failed</td>')
  htmlFile.write('</tr>\n')
  htmlFile.write('<tr>\n')
  htmlFile.write('<td bgcolor="ORANGE"><font color="ORANGE">xxxxxxxx</font></td>\n')
  htmlFile.write('<td>Build, Both compilation/link and testrun errors</td>')

  htmlFile.write('</tr>\n')
  htmlFile.write('</table>\n')
  htmlFile.write('</center>\n')
  

  #
  # Start the table
  #
  htmlFile.write('<table id="mainTable" border cellspacing="2" cellpadding="5">\n')
  htmlFile.write('<thead>\n')
  #
  # add all different variants to the collumns
  #
  htmlFile.write('<tr>\n<th> </th>\n')
  for entry in variantPackageArray:
    htmlFile.write('<th align=left>'+entry[0]+'</th>\n')
  htmlFile.write('</tr>\n')
  htmlFile.write('</thead>\n')
  htmlFile.write('<tbody>\n')



  for package in allBuildablePackages:
    htmlFile.write("<tr>\n<th align=left>\n"+package+"</th>\n")

    #
    # Look if this Package was also build in one of the variants
    #
    for entry in variantPackageArray:
      found=0
      for pck in entry[1]:
        if package == pck:
          found=1
      if found:
        color="GREEN"
        if (findFailedTests(entry[0],package,testResultsArray)):
          color="YELLOW"
        if (findFailedBuilds(entry[0],package,buildResultsArray)):
          if (color == "YELLOW") :
            color="ORANGE"
          else:
            color="RED"
        if (color != "GREEN"):
          rawName=entry[0]+'_'+package+'_Failed_'+machineName()+'.html'
          linkName=str.replace(rawName,'/','_')
          htmlFile.write('<td bgcolor="'+color+'">'
                          '<a href="'+linkName+'">')
          htmlFile.write('<font color="'+color+'">')
          for i in entry[0][1:len(entry[0])]:
            htmlFile.write('x')
          
          htmlFile.write('</font></a></td>\n')
        else:
          htmlFile.write('<td bgcolor="GREEN"> &nbsp</td>\n')
      else:
        htmlFile.write('<td bgcolor="GRAY"> &nbsp</td>\n')    
    htmlFile.write('</tr>')
  htmlFile.write('</tbody>\n')
  htmlFile.write('</table>\n')

  #
  # close html page
  #
  closeHTMLPage(htmlFile)


  #
  # No local processing (local == 0) means:
  #   copy generated files to the web server
  #
  if local == 0:

    #
    # Copy the "old" files from this machine in thisWeek to lastWeek
    #
    if noCopy==0:
      if remoteFileMove(lofarServer,serverDir) > 0:
        print "Move new to old on server not done because of errors"
      else:
        print "Move new to old on server done"

    #
    # Copy createNewIndex.py to the server
    #
    if copyServerSideScript(lofarServer,serverDir,lofarDir) > 0:
      print "Move script to server not done because of errors"
    else:
      print "Move script to server done"

    #
    # Copy the new generated html files to the Server
    #
    if copyFiles2Server(serverDir+"/BuildResults/thisWeek",
                        lofarServer) > 0:
      print "Copy html files not done because of errors"
    else:
      print "Copy html files to server done"


    #
    # run server side script to generate new index files there
    #
    if runServerSideScript(lofarServer,serverDir,server) > 0:
      print "Run script on server failed"
    else:
      print "Run script on server done"


  sys.exit(0)


#
# this is the main entry
#
if __name__ == "__main__":
  main(sys.argv[1:])
