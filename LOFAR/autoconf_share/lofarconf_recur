#!/bin/sh

#  lofarconf_recur

#  Copyright (C) 2003
#  ASTRON (Netherlands Foundation for Research in Astronomy)
#  P.O.Box 2, 7990 AA Dwingeloo, The Netherlands, seg@astron.nl
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#  $Id: lofarconf_recur 12207 2008-11-14 15:42:52Z loose $


# Run configure recursively on directories mentioned in a lofarconf.in
# The current directory is used as the variant name.
#
# Use as
#    lofarconf_recur infile srcdir [configure-options]

# Strip infile, srcdir and recur flag from arguments
lfr_infile="$1"
shift
lfr_srcdir="$1"
shift
lfr_recur="$1"
shift

# Get the current directory.
lfr_curdir=`pwd`
# Get the LOFAR base from the full path of this script.
lfr_sdir=`dirname $0`
lfr_root=`(cd $lfr_sdir && pwd) | sed -e "s%\(.*/LOFAR\).*%\1%"`
lfr_base=$lfr_root/autoconf_share

# Find package, lofar root, compiler, variant.
# Exit if not found.
lfr_result=`$lfr_base/findpkg "$lfr_srcdir" -l`
if [ $? != 0 ]; then
  echo "Could not derive package from current build directory";
  echo "The build directory should be in the source tree like"
  echo "      LOFAR/'package'/build/'variant'"
  echo "or in another tree like"
  echo "      something/build/'variant'/'package'"
  echo "or    something/'package'/build/'variant'"
  echo "where variant is, for example, gnu_opt."
  exit 2
fi
lfr_cmp=`echo $lfr_result | awk '{print $1}'`
lfr_var=`echo $lfr_result | awk '{print $2}'`
lfr_cvdir=`echo $lfr_result | awk '{print $3}'`
lfr_dirform=`echo $lfr_result | awk '{print $4}'`
lfr_pkg=`echo $lfr_result | awk '{print $5}'`

# Get the directory of the configure files for the package.
lfr_confdir=$lfr_root/$lfr_pkg;

# Get all subdirectories from lofarconf.in while removing comments.
subdirs=`sed -e s/#.*$//g $lfr_infile`
sdir=
for subdir in $subdirs
do
  sdir="$sdir $subdir"
  if [ ! -d $lfr_confdir/$subdir ]; then
    echo " Error: source subdirectory $subdir not found"
    exit 2
  fi
  if test "$lfr_dirform" = 0; then
    # Build is part of the package directory.
    # Make package, build, and variant directory if needed.
    cd ../.. > /dev/null   # suppress possible cd output
    if [ ! -d "$subdir" ]; then
      mkdir $subdir
    fi
    cd $subdir > /dev/null
    if [ ! -d build ]; then
      mkdir build
    fi
    cd build > /dev/null
    if [ ! -d $lfr_cvdir ]; then
      mkdir $lfr_cvdir
    fi
    cd $lfr_cvdir > /dev/null
  else
    # Package is part of the build directory.
    # Make package directory if needed.
    if [ ! -d $subdir ]; then
      mkdir $subdir
    fi
    cd $subdir > /dev/null
  fi
  if [ $lfr_recur = 1 ]; then
    echo && echo ":::::: CONFIGURE $lfr_pkg/$subdir"
    $lfr_base/lofarconf "$@" || exit 2
  fi
  cd $lfr_curdir > /dev/null
done

# Make sure there is an makeoptions.
touch makeoptions
# Remove Makefile and create a new one.
# Note that the quotes around EOF are needed to avoid substitution.
# The structure of the Makefile is similar to the top LOFAR Makefile
rm -rf Makefile
touch Makefile
echo "LOFARPACKAGE = $lfr_pkg" >> Makefile
echo "RECUR_PACKAGE = $sdir" >> Makefile
echo "RECUR_VARIANT = $lfr_cvdir" >> Makefile
echo "LOFARDIR = $lfr_root" >> Makefile
cat <<'EOFXXXXX' >> Makefile
RECUR_PACKAGES = $(RECUR_PACKAGE)
RECUR_VARIANTS = $(RECUR_VARIANT)
VARIANTNAMES = $(addsuffix .variant, $(RECUR_VARIANTS))
#
# build: Target to compile in a bootstrapped and configured tree
#
build: start_build $(VARIANTNAMES:.variant=.variant_build) stop_build
all: buildall
buildall: start_build $(VARIANTNAMES:.variant=.variant_buildall) stop_build
start_build:
	@echo && echo ":::::: BUILD START" && echo
stop_build:
	@echo && echo ":::::: BUILD COMPLETE" && echo
check: $(VARIANTNAMES:.variant=.variant_check)
install: $(VARIANTNAMES:.variant=.variant_install)
uninstall: $(VARIANTNAMES:.variant=.variant_uninstall)
clean: $(VARIANTNAMES:.variant=.variant_clean)
distclean: $(VARIANTNAMES:.variant=.variant_distclean)
dist: $(VARIANTNAMES:.variant=.variant_dist)

# Default check, but no clean and install.
WITH_CLEAN=0
WITH_CHECK=1
WITH_INSTALL=0
PREFIX = /data/LOFAR/installed

build_system:
	@date; \
	cd ../../; \
	for pkg in $(RECUR_PACKAGES); do \
	  if test -d $$pkg ; then \
	      for var in $(RECUR_VARIANTS); do \
		case $$var in *) inst_var=$$var;; \
	        esac; \
	        (echo \
		&& echo ":::::: CONFIGURING VARIANT $$var FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo \
		&& date \
		&& ((mkdir -p $$pkg/build/$$var; cd $$pkg/build/$$var \
		&& $(LOFARDIR)/autoconf_share/lofarconf -norecursive --prefix=$(PREFIX)/$$inst_var ) \
	   	  || echo ":::::: ERROR" ) \
		&& echo \
		&& echo ":::::: FINISHED CONFIGURING VARIANT $$var FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo ; ); \
		(echo \
		&& echo ":::::: BUILDING VARIANT $$var FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo \
		&& date \
		&& (( cd $$pkg/build/$$var \
		&& $(MAKE) -k $(MAKE_OPTIONS) `cat makeoptions` build_system WITH_CLEAN=$(WITH_CLEAN) WITH_CHECK=$(WITH_CHECK) WITH_INSTALL=$(WITH_INSTALL) PREFIX=$(PREFIX) ) \
			|| echo ":::::: ERROR" ) \
		&& echo \
		&& echo ":::::: FINISHED BUILDING VARIANT $$var FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo ;); \
	      done; \
	  else \
	    echo ":::::: ERROR $(LOFARPACKAGE)/$$pkg does not exist"; \
	  fi; \
	done; \

EOFXXXXX

if test $lfr_dirform = 0; then
  cat <<'EOFXXXXX' >> Makefile
#
# Rule to build variant recursively which continues in case of compile errors
#
%.variant_buildall:
	@date; \
	variant=`basename $@ .variant_buildall`; \
        cd ../..; \
	for pkg in $(RECUR_PACKAGES); do \
	    if test -d $$pkg; then \
	      if test -d $$pkg/src; then \
		( echo \
		&& echo ":::::: BUILDING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo \
		&& date \
		&& (( cd $$pkg/build/$$variant \
		&& $(MAKE) -k $(MAKE_OPTIONS) `cat makeoptions` ) \
                || echo ":::::: ERROR" ) \
		&& echo \
		&& echo ":::::: FINISHED BUILDING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo ; ) \
	      else \
		( echo \
		&& echo ":::::: BUILDING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo \
		&& date \
		&& (( cd $$pkg/build/$$variant \
		&& $(MAKE) -k $(MAKE_OPTIONS) `cat makeoptions` buildall ) \
                || echo ":::::: ERROR" ) \
		&& echo \
		&& echo ":::::: FINISHED BUILDING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo ; ) \
	      fi; \
	    fi; \
	done; \
	date
#
# Rule to build variant recursively which stops in case of compile errors
#
%.variant_build:
	@date; \
	variant=`basename $@ .variant_build`; \
        cd ../..; \
	for pkg in $(RECUR_PACKAGES); do \
	    if test -d $$pkg; then \
		echo \
		&& echo ":::::: BUILDING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo \
		&& date \
		&& ( cd $$pkg/build/$$variant \
		&& $(MAKE) $(MAKE_OPTIONS) `cat makeoptions` \
                || exit 2 ) || exit 2 \
		&& echo \
		&& echo ":::::: FINISHED BUILDING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo ; \
	    fi; \
	done; \
	date
#
# Rule to check variant recursively
#
%.variant_check:
	@date; \
	variant=`basename $@ .variant_check`; \
        cd ../..; \
	for pkg in $(RECUR_PACKAGES); do \
	    if test -d $$pkg; then \
		( echo \
		&& echo ":::::: CHECKING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo \
		&& date \
		&& cd $$pkg/build/$$variant \
		&& ($(MAKE) -k $(MAKE_OPTIONS) `cat makeoptions` check \
			|| echo ":::::: ERROR" )) \
		&& echo \
		&& echo ":::::: FINISHED CHECKING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo ; \
	    fi; \
	done; \
	date
#
# Rule to install variant recursively
#
%.variant_install:
	@date; \
	variant=`basename $@ .variant_install`; \
        cd ../..; \
	for pkg in $(RECUR_PACKAGES); do \
	    if test -d $$pkg; then \
		( echo \
		&& echo ":::::: INSTALLING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo \
		&& date \
		&& cd $$pkg/build/$$variant \
		&& ($(MAKE) -k $(MAKE_OPTIONS) `cat makeoptions` install \
			|| echo ":::::: ERROR" )) \
		&& echo \
		&& echo ":::::: FINISHED INSTALLING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo ; \
	    fi; \
	done; \
	date
#
# Rule to uninstall variant recursively
#
%.variant_uninstall:
	@date; \
	variant=`basename $@ .variant_uninstall`; \
        cd ../..; \
	for pkg in $(RECUR_PACKAGES); do \
	    if test -d $$pkg; then \
		( echo \
		&& echo ":::::: UNINSTALLING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo \
		&& date \
		&& cd $$pkg/build/$$variant \
		&& ($(MAKE) -k $(MAKE_OPTIONS) `cat makeoptions` uninstall \
			|| echo ":::::: ERROR" )) \
		&& echo \
		&& echo ":::::: FINISHED UNINSTALLING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo ; \
	    fi; \
	done; \
	date
#
# Rule to clean variant recursively
#
%.variant_clean:
	@date; \
	variant=`basename $@ .variant_clean`; \
        cd ../..; \
	for pkg in $(RECUR_PACKAGES); do \
	    if test -d $$pkg; then \
		( echo \
		&& echo ":::::: CLEANING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo \
		&& date \
		&& cd $$pkg/build/$$variant \
		&& ($(MAKE) -k $(MAKE_OPTIONS) `cat makeoptions` clean \
			|| echo ":::::: ERROR" )) \
		&& echo \
		&& echo ":::::: FINISHED CLEANING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo ; \
	    fi; \
	done; \
	date
#
# Rule to distclean variant recursively
#
%.variant_distclean:
	@date; \
	variant=`basename $@ .variant_distclean`; \
        cd ../..; \
	for pkg in $(RECUR_PACKAGES); do \
	    if test -d $$pkg; then \
		( echo \
		&& echo ":::::: DISTCLEANING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo \
		&& date \
		&& cd $$pkg/build/$$variant \
		&& ($(MAKE) -k $(MAKE_OPTIONS) `cat makeoptions` distclean \
			|| echo ":::::: ERROR" )) \
		&& echo \
		&& echo ":::::: FINISHED DISTCLEANING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo ; \
	    fi; \
	done; \
	date
#
# Rule to make distribution recursively
#
%.variant_dist:
	@date; \
	variant=`basename $@ .variant_dist`; \
        cd ../..; \
	for pkg in $(RECUR_PACKAGES); do \
	    if test -d $$pkg; then \
		( echo \
		&& echo ":::::: MAKING DIST OF VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo \
		&& date \
		&& cd $$pkg/build/$$variant \
		&& ($(MAKE) -k $(MAKE_OPTIONS) `cat makeoptions` dist \
			|| echo ":::::: ERROR" )) \
		&& echo \
		&& echo ":::::: FINISHED MAKING DIST OF VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo ; \
	    fi; \
	done; \
	date
EOFXXXXX

else
  cat <<'EOFXXXXX' >> Makefile
#
# Rule to build variant recursively which continues in case of compile errors
#
%.variant_buildall:
	@date; \
	variant=`basename $@ .variant_buildall`; \
	for pkg in $(RECUR_PACKAGES); do \
	    if test -d $$pkg; then \
		( echo \
		&& echo ":::::: BUILDING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo \
		&& date \
		&& (( cd $$pkg \
		&& $(MAKE) -k $(MAKE_OPTIONS) `cat makeoptions` buildall ) \
			|| echo ":::::: ERROR" ) \
		&& echo \
		&& echo ":::::: FINISHED BUILDING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo ; ) \
	    fi; \
	done; \
	date
#
# Rule to build variant recursively which stops in case of compile errors
#
%.variant_build:
	@date; \
	variant=`basename $@ .variant_build`; \
	for pkg in $(RECUR_PACKAGES); do \
	    if test -d $$pkg; then \
		( echo \
		&& echo ":::::: BUILDING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo \
		&& date \
		&& (( cd $$pkg \
		&& $(MAKE) -k $(MAKE_OPTIONS) `cat makeoptions` build ) \
			|| echo ":::::: ERROR" ) \
		&& echo \
		&& echo ":::::: FINISHED BUILDING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo ; ) \
	    fi; \
	done; \
	date
#
# Rule to check variant recursively
#
%.variant_check:
	@date; \
	variant=`basename $@ .variant_check`; \
	for pkg in $(RECUR_PACKAGES); do \
	    if test -d $$pkg; then \
		( echo \
		&& echo ":::::: CHECKING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo \
		&& date \
		&& cd $$pkg \
		&& ($(MAKE) -k $(MAKE_OPTIONS) `cat makeoptions` check \
			|| echo ":::::: ERROR" )) \
		&& echo \
		&& echo ":::::: FINISHED CHECKING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo ; \
	    fi; \
	done; \
	date
#
# Rule to install variant recursively
#
%.variant_install:
	@date; \
	variant=`basename $@ .variant_install`; \
	for pkg in $(RECUR_PACKAGES); do \
	    if test -d $$pkg; then \
		( echo \
		&& echo ":::::: INSTALLING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo \
		&& date \
		&& cd $$pkg \
		&& ($(MAKE) -k $(MAKE_OPTIONS) `cat makeoptions` install \
			|| echo ":::::: ERROR" )) \
		&& echo \
		&& echo ":::::: FINISHED INSTALLING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo ; \
	    fi; \
	done; \
	date
#
# Rule to uninstall variant recursively
#
%.variant_uninstall:
	@date; \
	variant=`basename $@ .variant_uninstall`; \
	for pkg in $(RECUR_PACKAGES); do \
	    if test -d $$pkg; then \
		( echo \
		&& echo ":::::: UNINSTALLING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo \
		&& date \
		&& cd $$pkg \
		&& ($(MAKE) -k $(MAKE_OPTIONS) `cat makeoptions` uninstall \
			|| echo ":::::: ERROR" )) \
		&& echo \
		&& echo ":::::: FINISHED UNINSTALLING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo ; \
	    fi; \
	done; \
	date
#
# Rule to clean variant recursively
#
%.variant_clean:
	@date; \
	variant=`basename $@ .variant_clean`; \
	for pkg in $(RECUR_PACKAGES); do \
	    if test -d $$pkg; then \
		( echo \
		&& echo ":::::: CLEANING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo \
		&& date \
		&& cd $$pkg \
		&& ($(MAKE) -k $(MAKE_OPTIONS) `cat makeoptions` clean \
			|| echo ":::::: ERROR" )) \
		&& echo \
		&& echo ":::::: FINISHED CLEANING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo ; \
	    fi; \
	done; \
	date
#
# Rule to distclean variant recursively
#
%.variant_distclean:
	@date; \
	variant=`basename $@ .variant_distclean`; \
	for pkg in $(RECUR_PACKAGES); do \
	    if test -d $$pkg; then \
		( echo \
		&& echo ":::::: DISTCLEANING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo \
		&& date \
		&& cd $$pkg \
		&& ($(MAKE) -k $(MAKE_OPTIONS) `cat makeoptions` distclean \
			|| echo ":::::: ERROR" )) \
		&& echo \
		&& echo ":::::: FINISHED DISTCLEANING VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo ; \
	    fi; \
	done; \
	date
#
# Rule to dist variant recursively
#
%.variant_dist:
	@date; \
	variant=`basename $@ .variant_dist`; \
	for pkg in $(RECUR_PACKAGES); do \
	    if test -d $$pkg; then \
		( echo \
		&& echo ":::::: MAKING DIST OF VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo \
		&& date \
		&& cd $$pkg \
		&& ($(MAKE) -k $(MAKE_OPTIONS) `cat makeoptions` dist \
			|| echo ":::::: ERROR" )) \
		&& echo \
		&& echo ":::::: FINISHED MAKING DIST OF VARIANT $$variant FOR PACKAGE $(LOFARPACKAGE)/$$pkg" \
		&& echo ; \
	    fi; \
	done; \
	date
EOFXXXXX

fi

cat <<'EOFXXXXX' >> Makefile
#
# Build the documentation
#
doc:
	@cp $(top_builddir)/.doxygenrc doxygen.cfg ; \
	@projnm=`(cd $(srcdir) && pwd) | sed -e "s%.*/LOFAR/%%"` ; \
	@echo "PROJECT_NAME = $$projnm" >> doxygen.cfg ; \
	@echo "INPUT = $(srcdir)" >> doxygen.cfg ; \
	@echo "RECURSIVE = YES" >> doxygen.cfg ; \
	@echo "HTML_OUTPUT = $(DOCDIR)" >> doxygen.cfg ; \
	@echo "EXCLUDE = $(srcdir)/build $(srcdir)/test" >> doxygen.cfg; \
	@$(DOXYGEN) doxygen.cfg ; \
#
# Show the variables
#
show:
	@echo ""
	@echo "PACKAGES = $(RECUR_PACKAGES)"
	@echo "VARIANTS = $(RECUR_VARIANTS)"
	@echo "LOFARDIR = $(LOFARDIR)"
	@echo ""
#
# Show the possible targets
#
help:
	@echo "Targets in $(LOFARDIR) Makefile"
	@echo "-------------------------------"
	@echo ""
	@echo "build:     build packages for variants; stop if error"
	@echo "all:       same as buildall"
	@echo "buildall:  build packages for variants; continue if error"
	@echo "check:     build and run all test programs for variants"
	@echo "install:   install variants"
	@echo "uninstall: uninstall variants"
	@echo "clean:     clean variants"
	@echo "distclean: distclean variants"
	@echo "dist:      make dist of variants"
	@echo "doc:       build documentation using doxygen"
	@echo ""
	@echo "%.variant_build:     build all packages for given variant; stop if error"
	@echo "%.variant_buildall:  build all packages for given variant; continue if error"
	@echo "%.variant:           same as %.variant_build"
	@echo "%.variant_check:     build and run all test programs for given variant"
	@echo "%.variant_install:   install given variant"
	@echo "%.variant_uninstall: uninstall given variant"
	@echo "%.variant_clean:     clean given variant"
	@echo "%.variant_distclean: distclean given variant"
	@echo "%.variant_dist:      making dist of  given variant"
	@echo ""
	@echo "show:      show the important variables"
	@echo ""
EOFXXXXX
